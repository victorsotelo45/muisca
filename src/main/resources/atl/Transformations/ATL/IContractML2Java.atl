module IContractML2Java;

-- @path Java= /Java_iContract/Java.ecore
-- @path IContract= /Java_iContract/sclang.ecore

-- Creación de los metamodelos
create OUT: Java from IN: IContract;

-- Helpers
-- Helper que extrae todas las transacciones (Transaction) del contrato.
helper context IContract!SContract def : getAllTransactions () : Sequence(IContract!Element) =
    IContract!Element.allInstances() ->select(p | p.oclIsTypeOf(IContract!Transaction)) ->asSet();

-- Helper que extrae todos los activos (Asset) del contrato.
helper context IContract!SContract def : getAsset () : IContract!Asset =
    IContract!Element.allInstances()
    ->select(e | e.oclIsTypeOf(IContract!Asset))
    ->first();

-- Helper que extrae todos los parámetros asociados a un activo (Asset).
helper context IContract!Asset def : getAllParameterAsset () : Sequence(IContract!Parameter) =
    self.element->asSequence();

-- Helper que extrae todos los parámetros asociados a una transacción (Transaction).
helper context IContract!Transaction def : getAllParameterTransaction () : Sequence(IContract!Parameter) =
    self.element->asSequence();

---Definición de variables de Transaction
helper def : typeFunc(T: IContract!Transaction) : String = 
	if (T.name.toLower().startsWith('create') or T.name.toLower().startsWith('main')) then
		#void
	else if(T.name.toLower().endsWith('exist') or T.name.toLower().endsWith('exists')) then
		#boolean
	else 
		'String'
	endif	
	endif
;

helper def : isVoid(T: IContract!Transaction) : Boolean = 
	if (T.name.toLower().startsWith('create') or T.name.toLower().startsWith('update') or T.name.toLower().startsWith('delete')) then
		true
	else
		false
	endif
;

helper def : return(T: IContract!Transaction) : String =    
	let name : String = '' in
        if(T.name.toLower().startsWith('read') or T.name.toLower().startsWith('query')) then
            name.concat('asset')
        else
            name.concat('')
        endif
    ;
helper def : objectReturn(S: OrderedSet(IContract!Asset), T: Java!Transaction) : String =
    S->iterate(asset; names : String = '' |
        if((T.name.toLower().startsWith('read') or T.name.toLower().startsWith('query')) and not asset.name.endsWith('ontract')) then
            names.concat(asset.name)
        else
            names.concat('')
        endif
    );


---Definición de variables de Information
helper def : title : String = 'default';
helper def : description : String = 'Este es un ejemplo por defecto de la estructura de la metadata del contrato';
helper def : version : String = '1.0'; 

---Definición de variables de License
helper def : nameLicense : String = 'default';
helper def : license : String = 'www.google.com';

---Definición de variables de Contact
helper def : email : String = 'default@gmail.com';
helper def : nameContact : String = 'default';
helper def : contact : String = 'www.google.com';

-- Helper que transforma el tipo de un parámetro a un tipo de Java basado en reglas específicas.
helper def : typeVar(F: Go!VariableStruct) : String = 
	if (F.type.toString().endsWith('ing')) then
		'String'
	else if(F.type.toString().startsWith('[]i')) then
		'int[]'
	else if(F.type.toString().startsWith('[]s')) then 
		'String[]'
	else if(F.type.toString().startsWith('contract')) then
		'Context'
	else if(F.type.toString().startsWith('int')) then
		'int'
	else if(F.type.toString().endsWith('at64')) then
		'double'
	else if(F.type.toString().endsWith('at32')) then
		'float'
	else 
		'boolean'
	endif
	endif
	endif
	endif
	endif
	endif		
	endif
;

-- Helper que define una descripción de importación personalizada.
helper def : customImportDescription : String = 'Libreria de Hyperledger Fabric';

-- Helper que define el nombre de importación personalizado.
helper def : customImportName : String = 'github.com/hyperledger/fabric-contract-api-Java/contractapi';

-- Reglas de transformación

-- Regla principal que transforma un contrato de entrada en un contrato de Java.
rule IContract2SmartContract {
    from
        s: IContract!SContract
    to
        t: Java!SmartContract (
            SCName <- s.scName,
			imports <- thisModule.createImport(s),
			packages <- thisModule.createPackage(s),
            contracts <- thisModule.createContract(s),
			transactions <- s.getAllTransactions(),
            assets <- s.getAsset()            
            
        )
}

lazy rule createContract {
    from
        s: IContract!SContract
    to
        t: Java!Contract (
        	Name <- 'Default',
        	informations <- thisModule.createInformation(s)	
        )		
}

lazy rule createInformation {
    from
        s: IContract!SContract
    to
        t: Java!Information (
        	Title <- thisModule.title,
			Description <- thisModule.description,
			Version <- thisModule.version,
        	licenses <- thisModule.createLicenses(s),
			contacts <- thisModule.createContacts(s)
        )		
}

lazy rule createLicenses {
    from
        s: IContract!SContract
    to
        t: Java!License (
        	Name <- thisModule.nameLicense,
			UrlLicense <- thisModule.license				
        )		
}

lazy rule createContacts {
    from
        s: IContract!SContract
    to
        t: Java!Contact (
        	Email <- thisModule.email,
			Name <- thisModule.nameContact,
			UrlContact <- thisModule.contact
        )		
}


-- Regla que transforma una transacción en una función de Java.
rule Transaction2Transaction {
    from
        s: IContract!Transaction
    to
        t: Java!Transaction (
			Name <- s.name,					
			Instructions <- '',	
			TypeFunc <- thisModule.typeFunc(s),
			IsVoid <- thisModule.isVoid(s),
			Return <- thisModule.return(s),
			ObjectReturn <-  thisModule.objectReturn(IContract!Asset.allInstances(), s),
			parameters <- s.getAllParameterTransaction()->collect(p | thisModule.Parameter2TransactionParameter(p))	
		)
}


-- Regla perezosa (lazy) que transforma un parámetro en un parámetro de función.
lazy rule Parameter2TransactionParameter {
    from
        p: IContract!Parameter
    to
        t: Java!Parameter (
            Name <- p.name,
            TypeVar <- thisModule.typeVar(p)
        )
}

rule Asset2Asset {
	from
		s: IContract!Asset (not s.name.endsWith('Contract'))
	to
		t: Java!Asset (
			packages <- thisModule.createPackageAsset(s),
			Name <- s.name,			
			properties <-  s.getAllParameterAsset()->collect(p | thisModule.Parameter2Property(p))	
		)
}

lazy rule Parameter2Property {
	from
		s: IContract!Parameter (not s.name.startsWith('contract'))
	to
		t: Java!Property (
			Name <- s.name,	
			TypeVar <- thisModule.typeVar(s),
			Visibility <- 'public'
		)
}


-- Regla perezosa (lazy) que crea una importación de Java en base al contrato.
lazy rule createImport {
    from
        s: IContract!SContract
    to
        t: Java!Import (
            Name <- thisModule.customImportName,
            Description <- thisModule.customImportDescription
        )
}

-- Regla perezosa (lazy) que crea el paquete principal de Java.
lazy rule createPackage {
    from
        s: IContract!SContract
    to
        t: Java!Package (
            Name <- 'main',
            Description <- 'Paquete principal'
        )
}

lazy rule createPackageAsset {
    from
        s: IContract!Asset
    to
        t: Java!Package (
            Name <- 'main',
            Description <- 'Paquete principal'
        )
}
